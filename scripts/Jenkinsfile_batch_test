#!groovy

node {
  def branch = "main"
  def testdir = "${env.TEST_DIRECTORY_LIST}".split(',')

  if ("${env.BRANCH}" != "null" && "${env.BRANCH}" != "") {
    branch = "${env.BRANCH}"
  }

  def repo = scm.userRemoteConfigs
  if ("${env.REPO}" != "null" && "${env.REPO}" != "") {
    repo = [
      [url: "${env.REPO}"]
    ]
  }
  def timeout = "60m"
  if ("${env.TIMEOUT}" != "null" && "${env.TIMEOUT}" != "") {
    timeout = "${env.TIMEOUT}"
  }
  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg': 1]) {
    withFolderProperties {
      paramsMap = []
      params.each {
        if (it.value && it.value.trim() != "") {
          paramsMap << "$it.key=$it.value"
        }
      }
      withEnv(paramsMap) {
        stage('Checkout') {
          deleteDir()
          checkout([
            $class: 'GitSCM',
            branches: [
              [name: "*/${branch}"]
            ],
            extensions: scm.extensions + [
              [$class: 'CleanCheckout']
            ],
            userRemoteConfigs: repo
          ])
        }
        dir("./") {
          stage('Run Parallel Jobs') {
            echo "Running ${testdir.size()} tests: ${testdir}"
            def jobs = [:]

            for (int i = 0; i < testdir.size(); i++) {
              def testname = testdir[i]
              def actual_testdir_name = testname

              if ( testname == "upgrademanual" || testname == "upgradereplacement" || testname == "upgradesuc"){
                actual_testdir_name = "upgradecluster"
                if ( testname == "sucupgrade") {
                  TEST_ARGS = "${TEST_ARGS}" + "-tags=${testname} -sucUpgradeVersion ${VERSION_OR_COMMIT}"
                } else {
                  TEST_ARGS = "${TEST_ARGS}" + "-tags=${testname} -channel ${UPGRADE_CHANNEL} -installVersionOrCommit ${VERSION_OR_COMMIT}"
                }
              }

              if ( testname == "deployrancher" ) {
                if ( "${CERT_MANAGER_VERSION}" != "") {
                  TEST_ARGS = "${TEST_ARGS}" + " -certManagerVersion ${CERT_MANAGER_VERSION}"
                }
                if ( "${CHARTS_VERSION}" != "") {
                  TEST_ARGS = "${TEST_ARGS}" + " -chartsVersion ${CHARTS_VERSION}"
                }
                if ( "${RANCHER_VERSION}" != "") {
                  TEST_ARGS = "${TEST_ARGS}" + " -rancherVersion ${RANCHER_VERSION}"
                }  
                if ( "${CHARTS_REPO_NAME}" != "") {
                  TEST_ARGS = "${TEST_ARGS}" + " -chartsRepoName ${CHARTS_REPO_NAME}"
                }
                if ( "${CHARTS_REPO_URL}" != "") {
                  TEST_ARGS = "${TEST_ARGS}" + " -chartsRepoUrl ${CHARTS_REPO_URL}"
                }
                if ( "${CHARTS_ARGS}" != "") {
                  TEST_ARGS = "${TEST_ARGS}" + " -chartsArgs ${CHARTS_ARGS}"
                }
              }
          
              def params = [
                string(name: 'TEST_ARGS', value: "${TEST_ARGS}"),
                string(name: 'REPO', value: "${REPO}"), 
                string(name: 'BRANCH', value: "${BRANCH}"),                                         
                string(name: 'PRODUCT_NAME', value: "${PRODUCT_NAME}"),                    
                string(name: 'PRE_UPGRADE_VERSION', value: "${PRE_UPGRADE_VERSION}"),
                string(name: 'VERSION_OR_COMMIT', value: "${VERSION_OR_COMMIT}"),
                string(name: 'INSTALL_MODE', value: "${INSTALL_MODE}"),
                string(name: 'CHANNEL', value: "${CHANNEL}"),
                string(name: 'HOSTNAME_PREFIX', value: "${HOSTNAME_PREFIX}"), 
                string(name: 'TEST_DIRECTORY', value: actual_testdir_name),
                string(name: 'AWS_SSH_KEY_NAME', value: "${AWS_SSH_KEY_NAME}"),
                string(name: 'AWS_SSH_PEM_KEY', value: "${AWS_SSH_PEM_KEY}"),                                                          
              ]
              echo "Params are: ${params}"

              echo "Trigger build job for: ${testname}"
              switch(testname) {
                case "validatecluster":
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_validate_cluster", parameters: params }                 
                case "restartservice":
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_restart_service", parameters: params }                  
                case "dualstack":
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_dual_stack", parameters: params }                 
                case "deployrancher":
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_deploy_rancher_manager", parameters: params } 
                case "certrotate": 
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_cert_rotate", parameters: params }                
                case "secretsencrypt": 
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_secrets_encryption", parameters: params }
                case "upgrademanual": 
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_manual_upgrade", parameters: params }
                case "upgradesuc": 
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_suc_upgrade", parameters: params }
                case "upgradereplacement": 
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_upgrade_node_replacement", parameters: params }
                case "clusterreset":
                  jobs[testname] = { build job: "${env.PRODUCT_NAME}_cluster_reset", parameters: params }                                                         
              }
            }

            parallel jobs
          } // stage run parallel jobs
        } // dir
      } // withEnv
    } // withFolderProperties
  } // wrap
} // node
